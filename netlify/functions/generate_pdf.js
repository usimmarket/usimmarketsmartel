
// netlify/functions/generate_pdf.js
import { readFile } from 'node:fs/promises';
import path from 'node:path';
import { PDFDocument, rgb } from 'pdf-lib';

const ASSETS_DIR = path.resolve(path.dirname(new URL(import.meta.url).pathname), 'assets');

const cors = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'Content-Type',
  'Access-Control-Allow-Methods': 'POST,OPTIONS'
};

export async function handler(event) {
  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers: cors, body: '' };
  }

  try {
    const body = event.body ? JSON.parse(event.body) : {};
    const data = body.data || {};

    // Load template
    const tplBytes = await readFile(path.join(ASSETS_DIR, 'template.pdf'));
    const pdfDoc = await PDFDocument.load(tplBytes);

    // Try to embed font if present (for KR text). Fallback to default.
    let customFont = null;
    try {
      const fontBytes = await readFile(path.join(ASSETS_DIR, 'NotoSansKR.ttf'));
      customFont = await pdfDoc.embedFont(fontBytes);
    } catch(_) {}

    const pages = pdfDoc.getPages();
    const p = pages[0];

    // Very simple demo stamps — you will replace with real mapping later
    const drawText = (txt, x, y, size=10) => {
      const options = { x, y, size, color: rgb(0,0,0) };
      if (customFont) options.font = customFont;
      p.drawText(String(txt||''), options);
    };

    // Put a small stamp to prove it's being generated by the function
    drawText('SMARTEL PDF', 30, 800, 12);
    if (data.subscriber) drawText('가입자: ' + data.subscriber, 30, 780, 11);
    if (data.subscriber_phone) drawText('연락처: ' + data.subscriber_phone, 30, 765, 11);
    if (data.addr) drawText('주소: ' + data.addr, 30, 750, 11);

    const pdfBytes = await pdfDoc.save();
    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/pdf', ...cors },
      body: Buffer.from(pdfBytes).toString('base64'),
      isBase64Encoded: true
    };
  } catch (err) {
    console.error(err);
    return { statusCode: 500, headers: cors, body: String(err) };
  }
}
